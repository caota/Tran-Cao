{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a class to grade (i.e. class1 for class1.txt): class1\n",
      "Successfully opened class1.txt\n",
      "No errors found!\n",
      "**** REPORT ****\n",
      "Total valid lines of data:  20\n",
      "Total invalid lines of data:  0\n",
      "Mean (average) score:  75.6\n",
      "Highest score:  91\n",
      "Lowest score:  59\n",
      "Range of scores:  32\n",
      "Median score:  73.0\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "import statistics\n",
    "from statistics import mean\n",
    "\n",
    "def openFile():\n",
    "    # Cho phép người dùng nhập tên 1 tệp\n",
    "    global file_name\n",
    "    file_name = input(\"Enter a class to grade (i.e. class1 for class1.txt): \")\n",
    "    try:\n",
    "        with open(\"{}.txt\".format(file_name), 'r') as file1:\n",
    "            print('Successfully opened {}.txt'.format(file_name))\n",
    "            \n",
    "            # Đọc nội dung file và gán vào biến content\n",
    "            # Sử dụng splitlines() để loại bỏ ký tự \\n cuối mỗi dòng\n",
    "            content = file1.read().splitlines()\n",
    "        return content\n",
    "    except:\n",
    "        print('File cannot be found')\n",
    "\n",
    "def analyzing(content):\n",
    "    # Biến đếm tổng số dòng\n",
    "    countTotalLines = 0\n",
    "            \n",
    "    # Biến đếm số dòng hợp lệ\n",
    "    countCorrectLines = 0\n",
    "    \n",
    "    # Regex pattern để check dữ liệu mã sinh viên\n",
    "    pattern = \"^N[0-9]{8}$\"\n",
    "    \n",
    "    # Đáp án mẫu lưu ra list\n",
    "    answer_keys = \"B,A,D,D,C,B,D,A,C,C,D,B,A,B,A,C,B,D,A,C,A,A,B,D,D\".split(\",\")\n",
    "\n",
    "    # Lưu điểm sinh viên vào dict, với Key là mã sinh viên, value là điểm cho mỗi sinh viên\n",
    "    dictStudents = dict()\n",
    "        \n",
    "    # Đọc từng dòng trong file1\n",
    "    for line in content:\n",
    "        totalScore = 0\n",
    "        countTotalLines += 1\n",
    "                \n",
    "        # Sử dụng hàm split dể tách dữ liệu theo ký tự ','\n",
    "        data = line.split(\",\")\n",
    "                \n",
    "        # Check xem dòng dữ liệu có hợp lệ hay không?\n",
    "        if(len(data) != 26):\n",
    "            print(\"Invalid line of data: does not contain exactly 26 values:\")\n",
    "            print(\",\".join(data))\n",
    "        elif(len(data[0]) != 9 or not re.match(pattern, data[0])):\n",
    "            print(\"Invalid line of data: N# is invalid\")\n",
    "            print(\",\".join(data))\n",
    "        else:\n",
    "            countCorrectLines += 1\n",
    "            \n",
    "            # lấy danh sách câu trả lời, loại trừ mã sinh viên (lấy từ index thứ 1 cho đến index cuối cùng)\n",
    "            lstAnswers = data[1:]\n",
    "            for idx in range(0, len(answer_keys)):\n",
    "                if lstAnswers[idx] == answer_keys[idx]:\n",
    "                    totalScore += 4\n",
    "                elif lstAnswers[idx] == '':\n",
    "                    totalScore += 0\n",
    "                else:\n",
    "                    totalScore -= 1 \n",
    "            dictStudents[data[0]] = totalScore\n",
    "                \n",
    "    if countTotalLines - countCorrectLines == 0:\n",
    "        print(\"No errors found!\")\n",
    "    print(\"**** REPORT ****\")\n",
    "    print(\"Total valid lines of data: \", countCorrectLines)\n",
    "    print(\"Total invalid lines of data: \", countTotalLines - countCorrectLines)\n",
    "            \n",
    "    return dictStudents\n",
    "\n",
    "def saveFile(dictStudents):\n",
    "    \n",
    "    # Convert dic values thành list\n",
    "    result = list(dictStudents.values())\n",
    "    print(\"Mean (average) score: \", mean(result))\n",
    "    print(\"Highest score: \", max(result))\n",
    "    print(\"Lowest score: \", min(result))\n",
    "    print(\"Range of scores: \", max(result) - min(result))\n",
    "    print(\"Median score: \",statistics.median(result))\n",
    "            \n",
    "    # Ghi file dạng text lưu thông tin điểm thi của các sinh viên\n",
    "    with open(\"{}_grades.txt\".format(file_name), \"w\") as file2:\n",
    "        for key, value in dictStudents.items():\n",
    "            file2.write(str(key) + \",\" + str(value)+\"\\n\")\n",
    "      \n",
    "def main():\n",
    "    try:\n",
    "        # Mở file\n",
    "        file1 = openFile()\n",
    "        \n",
    "        # Phân tích file\n",
    "        dictStudents = analyzing(file1)\n",
    "        \n",
    "        # lưu kết quả\n",
    "        saveFile(dictStudents)\n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "\n",
    "main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
